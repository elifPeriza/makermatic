"use client";

import { useState } from "react";
import Button from "./Button";
import Logo from "./Logo";
import { Dialog } from "@headlessui/react";

const defaultColorPalette = [
  "hsl(298, 29%, 43%)",
  "hsl(179, 39%, 54%)",
  "hsl(28, 77%, 56%)",
];

export default function Header() {
  let [isOpen, setIsOpen] = useState(false);
  let [error, setError] = useState<undefined | string>(undefined);
  let [colorPalette, setColorPalette] = useState(defaultColorPalette);
  let [isLoading, setIsLoading] = useState(false);

  const handleColorPaletteGeneration = async () => {
    setIsLoading(true);
    const response = await fetch("http://localhost:3000/api/colorpalette").then(
      (response) => response.json()
    );

    const delay = new Promise((resolve) => setTimeout(resolve, 2000));

    const [responseWithDelay] = await Promise.all([response, delay]);

    if (responseWithDelay.error) {
      setIsLoading(false);
      setError(response.error);
      return;
    }

    const randomColorPalette: string[] = Object.values(
      responseWithDelay
    ) as string[]; //type assertion as we have strict validation in the backend
    if (!randomColorPalette) {
      setIsLoading(false);
      setError(
        "Oops, something went wrong, try again or select the current palette. No worries, you can change it later!"
      );
      return;
    }

    setColorPalette([...randomColorPalette]);
    setError(undefined);
    setIsLoading(false);
  };

  return (
    <header>
      <div className=" mt-5 flex flex-row md:mt-8">
        <Logo />
        <nav className="ml-auto mobile:hidden sm:hidden md:block">
          <Button onClick={() => setIsOpen(true)} variant="primary">
            + new project
          </Button>
        </nav>
        <nav className=" fixed bottom-0 left-0 right-0 z-50 flex h-12 justify-center bg-darkblue  md:hidden">
          <button
            onClick={() => setIsOpen(true)}
            className=" z-100 absolute bottom-4 h-14 w-14 self-start rounded-full bg-softgreen font-sans text-3xl "
          >
            +
          </button>
        </nav>
      </div>
      <Dialog
        open={isOpen}
        onClose={() => {
          setIsOpen(false);
          setError(undefined);
          setColorPalette([...defaultColorPalette]);
        }}
        className="relative z-50"
      >
        <div
          data-testid="modalbackdrop"
          className="fixed inset-0 bg-black/30"
          aria-hidden="true"
        />

        <div className="fixed inset-0 flex items-center justify-center p-4">
          <Dialog.Panel>
            <div className=" w-[90vw] max-w-[700px] rounded-md bg-midblue p-6 sm:p-10">
              <div className="flex flex-col font-sans text-base text-white ">
                <Dialog.Title className="mb-4 self-center font-medium">
                  New Project
                </Dialog.Title>

                <label className="font-medium" htmlFor="projectName">
                  Name:
                </label>
                <input
                  type="text"
                  id="projectName"
                  className="mb-6 h-8 rounded-md border border-lightblue bg-darkblue p-2"
                ></input>
                <label htmlFor="projectDescription" className="font-medium">
                  Description (optional):
                </label>
                <textarea
                  id="projectDescription"
                  className="mb-4 h-14 min-h-[32px] rounded-md border border-lightblue bg-darkblue p-2"
                ></textarea>
                <div className="mt-4 flex flex-col gap-6">
                  <h3 className="font-medium">
                    Color palette generated by your task buddy:
                  </h3>

                  <div className="flex flex-row self-center">
                    {colorPalette.map((color) => (
                      <div
                        key={color}
                        className={`h-[24px] w-[24px] rounded-[5px]  ${
                          isLoading ? "animate-hueshift" : ""
                        }`}
                        style={{ backgroundColor: color }}
                      ></div>
                    ))}
                  </div>

                  {error && (
                    <p className="max-w-xs self-center text-center text-lightred">
                      {error}
                    </p>
                  )}

                  <div className="mb-10 flex flex-row justify-center gap-6">
                    <Button
                      onClick={handleColorPaletteGeneration}
                      variant="primary"
                      disabled={isLoading}
                    >
                      {isLoading ? "generating..." : "generate new palette"}
                    </Button>
                  </div>
                </div>

                <label htmlFor="projectNotes" className="font-medium">
                  Notes (optional):
                </label>
                <textarea
                  id="projectNotes"
                  className="mb-10 h-32 min-h-[32px] rounded-md border border-lightblue bg-darkblue p-2"
                ></textarea>
              </div>
              <div className=" flex flex-row justify-end gap-6 ">
                <Button
                  variant="secondary"
                  onClick={() => {
                    setIsOpen(false);
                    setError(undefined);
                    setColorPalette([...defaultColorPalette]);
                  }}
                >
                  Cancel
                </Button>
                <Button variant="primary">Create Project</Button>
              </div>
            </div>
          </Dialog.Panel>
        </div>
      </Dialog>
    </header>
  );
}
